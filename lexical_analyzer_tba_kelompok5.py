# -*- coding: utf-8 -*-
"""Lexical Analyzer TBA_Kelompok5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DXExHU8IU1yxMVhSJwJR2Qnqn_hp8K4n
"""

import string
# Kelompok 5
# Alifio Yudhistira Aji Salis (1301204029)
# Gerin Aryo Prasetia (1301194479)
# Keenan Ariqul Hashim (1301202323)


# input example
# print("kata dalam bahasa melayu yang telah dipelajari")
# print("saye || kamu || kite || makan || minum ")
# print("tengok || bahagi || ikan || ais || kayu ")
# sentence = (input("silahkan masukan kalimat: ",))

def lexicalAnalyzer(kalimat):
    input_string = kalimat.lower()+'#'

    # initialization
    alphabet_list = list(string.ascii_lowercase)
    state_list = ['q0', 'q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', 'q8',
                  'q9', 'q10', 'q11', 'q12', 'q13', 'q14', 'q15', 'q16',
                  'q17', 'q18', 'q19', 'q20', 'q21', 'q22', 'q23', 'q24',
                  'q25', 'q26', 'q27', 'q28', 'q29', 'q30', 'q31', 'q32',
                  'q33', 'q34', 'q35', 'q36', 'q37', 'q38', 'q39', 'q40', 'q41']

    transition_table = {}

    for state in state_list:
        for alphabet in alphabet_list:
            transition_table[(state, alphabet)] = 'error'
        transition_table[(state, '#')] = 'error'
        transition_table[(state, ' ')] = 'error'

    # space before input string
    transition_table['q0', ' '] = 'q0'

    # update the transition table for the following token : saye
    transition_table['q0', 's'] = 'q1'
    transition_table['q1', 'a'] = 'q2'
    transition_table['q2', 'y'] = 'q3'
    transition_table['q3', 'e'] = 'q4'
    transition_table['q4', '#'] = 'accept'
    transition_table['q4', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : kamu
    transition_table['q0', 'k'] = 'q11'
    transition_table['q11', 'a'] = 'q12'
    transition_table['q12', 'm'] = 'q14'
    transition_table['q14', 'u'] = 'q15'
    transition_table['q15', '#'] = 'accept'
    transition_table['q15', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : kite
    transition_table['q11', 'i'] = 'q16'
    transition_table['q16', 't'] = 'q17'
    transition_table['q17', 'e'] = 'q18'
    transition_table['q18', '#'] = 'accept'
    transition_table['q18', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : makan
    transition_table['q0', 'm'] = 'q19'
    transition_table['q19', 'a'] = 'q24'
    transition_table['q24', 'k'] = 'q25'
    transition_table['q25', 'a'] = 'q26'
    transition_table['q26', 'n'] = 'q27'
    transition_table['q27', '#'] = 'accept'
    transition_table['q27', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : minum
    transition_table['q19', 'i'] = 'q20'
    transition_table['q20', 'n'] = 'q21'
    transition_table['q21', 'u'] = 'q22'
    transition_table['q22', 'm'] = 'q23'
    transition_table['q23', '#'] = 'accept'
    transition_table['q23', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : tengok
    transition_table['q0', 't'] = 'q31'
    transition_table['q31', 'e'] = 'q32'
    transition_table['q32', 'n'] = 'q33'
    transition_table['q33', 'g'] = 'q34'
    transition_table['q34', 'o'] = 'q35'
    transition_table['q35', 'k'] = 'q36'
    transition_table['q36', '#'] = 'accept'
    transition_table['q36', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : bahagi
    transition_table['q0', 'b'] = 'q5'
    transition_table['q5', 'a'] = 'q6'
    transition_table['q6', 'h'] = 'q7'
    transition_table['q7', 'a'] = 'q8'
    transition_table['q8', 'g'] = 'q9'
    transition_table['q9', 'i'] = 'q10'
    transition_table['q10', '#'] = 'accept'
    transition_table['q10', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : ikan
    transition_table['q0', 'i'] = 'q37'
    transition_table['q37', 'k'] = 'q38'
    transition_table['q38', 'a'] = 'q39'
    transition_table['q39', 'n'] = 'q40'
    transition_table['q40', '#'] = 'accept'
    transition_table['q40', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : ais
    transition_table['q0', 'a'] = 'q28'
    transition_table['q28', 'i'] = 'q29'
    transition_table['q29', 's'] = 'q30'
    transition_table['q30', '#'] = 'accept'
    transition_table['q30', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # update the transition table for the following token : kayu
    transition_table['q12', 'y'] = 'q13'
    transition_table['q13', 'u'] = 'q15'
    transition_table['q15', '#'] = 'accept'
    transition_table['q15', ' '] = 'q41'
    transition_table['q41', '#'] = 'accept'

    # transition for new token
    transition_table['q41', ' '] = 'q41'
    transition_table['q41', 's'] = 'q1'
    transition_table['q41', 'b'] = 'q5'
    transition_table['q41', 'k'] = 'q11'
    transition_table['q41', 'm'] = 'q19'
    transition_table['q41', 'a'] = 'q28'
    transition_table['q41', 'i'] = 'q37'

    # lexical analysis
    idx_char = 0
    state = 'q0'
    current_token = ''
    while state != 'accept':
        current_char = input_string[idx_char]
        current_token += current_char
        state = transition_table[(state, current_char)]
        if state == 'q41':
            # print('current token :',current_token,', valid')
            return True
            current_token = ''
        if state == 'error':
            # print('error')
            return False
            break
        idx_char = idx_char + 1

    if state == 'accept':
        # print('semua token di input:', sentence, ', valid')
        return True


def parser(kalimat):
    input_string = kalimat.lower().split()
    input_string.append('EOS')

    non_terminals = ['S', 'NN', 'VB']
    terminals = ["saye", "kamu", "kite", "makan", "minum",
                 "tengok", "bahagi", "ikan", "ais", "kayu"]

    # Parse Table Definition
    parse_table = {}

    parse_table[('S', 'saye')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'kamu')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'kite')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'ikan')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'ais')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'kayu')] = ['NN', 'VB', 'NN']
    parse_table[('S', 'makan')] = ['error']
    parse_table[('S', 'minum')] = ['error']
    parse_table[('S', 'tengok')] = ['error']
    parse_table[('S', 'bahagi')] = ['error']
    parse_table[("S", "EOS")] = ["error"]

    parse_table[('NN', 'saye')] = ['saye']
    parse_table[('NN', 'kamu')] = ['kamu']
    parse_table[('NN', 'kite')] = ['kite']
    parse_table[('NN', 'ikan')] = ['ikan']
    parse_table[('NN', 'ais')] = ['ais']
    parse_table[('NN', 'kayu')] = ['kayu']
    parse_table[('NN', 'makan')] = ['error']
    parse_table[('NN', 'minum')] = ['error']
    parse_table[('NN', 'tengok')] = ['error']
    parse_table[('NN', 'bahagi')] = ['error']
    parse_table[('NN', "EOS")] = ["error"]

    parse_table[('VB', 'saye')] = ['error']
    parse_table[('VB', 'kamu')] = ['error']
    parse_table[('VB', 'kite')] = ['error']
    parse_table[('VB', 'ikan')] = ['error']
    parse_table[('VB', 'ais')] = ['error']
    parse_table[('VB', 'kayu')] = ['error']
    parse_table[('VB', 'makan')] = ['makan']
    parse_table[('VB', 'minum')] = ['minum']
    parse_table[('VB', 'tengok')] = ['tengok']
    parse_table[('VB', 'bahagi')] = ['bahagi']
    parse_table[('VB', "EOS")] = ["error"]

    # stack initialization
    stack = []
    stack.append('#')
    stack.append('S')

    # input reading initialization
    idx_string = 0
    symbol = input_string[idx_string]

    # parsing process
    while (len(stack) > 0):
        top = stack[len(stack)-1]
        # print('top - ', top)
        # print('symbol - ', symbol)
        if top in terminals:
            # print('top adalah simbol terminal')
            if top == symbol:
                stack.pop()
                idx_string = idx_string + 1
                symbol = input_string[idx_string]
                if symbol == "EOS":
                    # print('isi stack:', stack)
                    stack.pop()
            else:
                return False
        elif top in non_terminals:
            # print('top adalah simbol non-terminal')
            if parse_table[(top, symbol)][0] != "error":
                stack.pop()
                symbols_to_be_pushed = parse_table[(top, symbol)]
                for i in range(len(symbols_to_be_pushed) - 1, -1, -1):
                    stack.append(symbols_to_be_pushed[i])
            else:
                return False
        else:
            return False
        # print('isi stack', stack)
        # print()

    # kesimpulan
    # print()
    if symbol == "EOS" and len(stack) == 0:
        # print('Input string', input_string, '', 'diterima, sesuai Grammar')
        return True
    else:
        return False
        # print('Error, input string', input_string,
        #       'tidak diterima, tidak sesuai grammar')
